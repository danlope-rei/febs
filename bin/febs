#!/usr/bin/env node
const febs = require('../index.js');
const febsInit = require('../febs-init.js');
const program = require('commander');

// Set default command to 'build' (commander {isDefault: true} not working..)
process.argv[2] = process.argv[2] ? process.argv[2] : 'build';

program
  .usage('[task] [options]')
  .description('Builds and bundles front-end assets with minimal configuration\n')
  .version(require('../package.json').version)
  .option('-v, --verbose', 'Increase logging verbosity of build system')
  .option('--debug', 'Higher level of verbosity, including debug output');

program
  .command('build')
  .description('(Default) Builds front-end assets optimized for production\n')
  .action((command) => {
    febs({
      command,
      logLevel: command.parent.verbose ? 'verbose' : 'info',
    }).compile();
  });

program
  .command('prod')
  .description('Builds front-end assets optimized for production\n')
  .action((command) => {
    const verbose = command.parent.verbose;
    febs({
      command,
      logLevel: command.parent.verbose ? 'verbose' : 'info',
    }).compile();
  });

program
  .command('dev')
  .description('Builds/Serves front-end assets optimized for local development\n')
  .option('--no-dev-server')
  .action((command) => {
    const verbose = command.parent.verbose;

    if (command.devServer) {
      febs({
        command,
        logLevel: command.parent.verbose ? 'verbose' : 'info',
      }).startDevServer();
    } else {
      febs({
        command,
        logLevel: command.parent.verbose ? 'verbose' : 'info',
      }).compile();
    }
  });

program
  .command('test')
  .description('Runs unit tests.\n')
  .option('-c, --cover', 'Run test coverage')
  .action((command) => {
    const verbose = command.parent.verbose;

    febs({
      command,
      logLevel: verbose ? 'verbose' : 'info',
    }).test();
  });

program
  .command('init')
  .description('Creates basic scaffolding for a new front-end build\n')
  .action((command) => {
    const verbose = command.parent.verbose;
    febsInit();
  });


program
  .on('--help', () => {
    process.stdout.write(`  Examples:
        $ febs dev --no-dev-server
        $ febs build --verbose
        $ febs test
        $ febs test --coverage
    `);
  });

program.parse(process.argv);
